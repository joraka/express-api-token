{
	"info": {
		"_postman_id": "ac658857-d74c-4486-b2b7-7782b7414502",
		"name": "temp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10518058",
		"_collection_link": "https://bit-team-9341.postman.co/workspace/BIT~4410a6db-ef5d-4a56-b2f1-0602140ae45e/collection/10518058-ac658857-d74c-4486-b2b7-7782b7414502?action=share&source=collection_link&creator=10518058"
	},
	"item": [
		{
			"name": "/users - add user Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains user information\", () => {\r",
							"    const requestBody = JSON.parse(pm.request.body.raw);\r",
							"    const { message, user } = pm.response.json();\r",
							"\r",
							"    pm.collectionVariables.set(\"REQUEST_BODY\", pm.request.body.raw);\r",
							"    pm.collectionVariables.set(\"REQUEST_ID\", user.id);\r",
							"\r",
							"    pm.expect(message).to.eql(\"User created\", \"Message should be 'User created'\");\r",
							"\r",
							"    pm.expect(user).to.be.an(\"object\").and.have.all.keys(\"id\", \"username\", \"email\");\r",
							"\r",
							"    pm.expect(user.id, \"ID must be at least 1\").to.be.a(\"number\").and.to.be.at.least(1);\r",
							"    pm.expect(user.username, \"Username should match the request body\").to.be.a(\"string\").and.eql(requestBody.username);\r",
							"    pm.expect(user.email, \"Email should match the request body\").to.be.a(\"string\").and.eql(requestBody.email);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"pass123\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/v1/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "/login - login and data validation after email and username update Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains login information\", () => {\r",
							"    const requestBody = JSON.parse(pm.collectionVariables.get(\"REQUEST_BODY\"));\r",
							"    const requestId = Number(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    //save token\r",
							"    pm.collectionVariables.set(\"TOKEN\", responseBody.token);\r",
							"\r",
							"    pm.expect(responseBody).to.be.an(\"object\").and.have.all.keys(\"message\", \"user\", \"token\");\r",
							"\r",
							"    const { message, user, token } = responseBody;\r",
							"\r",
							"    pm.expect(message).to.eql(\"User logged in\", \"Message should be 'User logged in'\");\r",
							"\r",
							"    pm.expect(user).to.be.an(\"object\").and.have.all.keys(\"id\", \"username\", \"email\");\r",
							"    pm.expect(user.id, \"User ID must match request id\").to.be.a(\"number\").and.to.be.eql(requestId);\r",
							"    pm.expect(user.username, \"Username should match request body\").to.be.a(\"string\").and.eql(requestBody.username);\r",
							"    pm.expect(user.email, \"Email should match request body\").to.be.a(\"string\").and.eql(requestBody.email);\r",
							"\r",
							"    pm.expect(token, \"Token must be a non-empty string\").to.be.a(\"string\").and.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestBody = JSON.parse(pm.collectionVariables.get(\"REQUEST_BODY\"));\r",
							"\r",
							"pm.request.headers.add('content-type: application/json')\r",
							"\r",
							"pm.request.body = {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        username: requestBody.username,\r",
							"        password: requestBody.password,\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/v1/login",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"v1",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/details - get user Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains user information\", function () {\r",
							"    const requestBody = JSON.parse(pm.collectionVariables.get(\"REQUEST_BODY\"));\r",
							"    const responseUserId = parseInt(pm.collectionVariables.get(\"REQUEST_ID\"));\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    pm.expect(responseBody).to.be.an(\"object\").and.have.all.keys(\"message\", \"user\");\r",
							"    pm.expect(responseBody.user).to.be.an(\"object\").and.have.all.keys(\"id\", \"username\", \"email\");\r",
							"\r",
							"    pm.expect(responseBody.user.username).to.be.a(\"string\");\r",
							"    pm.expect(responseBody.user.email).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(responseBody.message).to.eql(\"User found\", \"Message should be 'User found'\");\r",
							"    pm.expect(responseBody.user.id).to.eql(responseUserId, \"Response user id should match the request id\");\r",
							"    pm.expect(responseBody.user.username).to.eql(requestBody.username, \"Username should match the request body\");\r",
							"    pm.expect(responseBody.user.email).to.eql(requestBody.email, \"Email should match the request body\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/v1/user/details",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"v1",
						"user",
						"details"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:3131",
			"type": "string"
		},
		{
			"key": "REQUEST_BODY",
			"value": ""
		},
		{
			"key": "REQUEST_ID",
			"value": ""
		},
		{
			"key": "TOKEN",
			"value": ""
		}
	]
}